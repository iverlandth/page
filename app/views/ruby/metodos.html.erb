<div id="readme" class="blob instapaper_body">
<article itemprop="mainContentOfPage"><h2>
  <a name="m%C3%A1s-acerca-de-m%C3%A9todos" class="anchor" href="#m%C3%A1s-acerca-de-m%C3%A9todos"><span class="mini-icon mini-icon-link"></span></a>Más
  acerca de Métodos</h2>

<p>Hemos visto diferentes métodos: <code>puts</code>, <code>gets</code>,
  etc. (***Prueba:*** <em>Listar todos los métodos que hemos
  visto hasta ahora!. Hay diez de ellos, la respuesta está abajo</em>), pero no hemos
  realmente hablado sobre que hacen los métodos. Sabemos que hacen, pero no lo que son.</p>

<p>Pero realmente, esto <em>es</em> lo que son: cosas que generan otras.
  Si objetos (como textos, enteros y flotantes) son los sujetos en
  el lenguaje Ruby, entonces los métodos son como verbos. Y, justo como en el
  español, tú no puedes tener un verbo sin un sustantivo para <em>hacer</em> algo.
  Por ejemplo, tic-tac no es algo que sólo ocurre; un reloj (o algo) tiene que hacer
  esto. En español podemos decir: "El reloj hace tic-tac". En Ruby podemos decir
  <code>clock.tick</code> (asumiendo por supuesto que <code>clock</code> es un objeto Ruby).
  Los programadores pueden decir que estamos "llamando el método <code>tick</code> de
  <code>clock</code>" o llamamos al "<code>tick</code> de <code>clock</code>".</p>

<p>Entonces, ¿has hecho la prueba? Bien. Bueno, estoy seguro que
  recordaras los métodos <code>puts</code>, <code>gets</code>, y
  <code>chomp</code>, dado que ya hablamos sobre ellos.
  Probablemente también recuerdas los métodos de conversión
  <code>to_i</code>, <code>to_f</code>, y <code>to_s</code>. Sin embargo,
  ¿has visto los otros cuatro? Porque, estos no son otros que
  nuestros viejos amigos para la aritmética ¡<code>+</code>,
  <code>-</code>, <code>*</code>, y <code>/</code>!</p>

<p>Entonces, como cada verbo necesita un sustantivo,
  entonces cada método necesita un objeto. Esto es generalmente fácil de
  indicar: es el que viene justo antes de un punto, como nuestro
  ejemplo <code>clock.tick</code>, o en <code>101.to_s</code>.
  Algunas veces, sin embargo, esto no es tan obvio; como con los métodos
  aritméticos. Como resulta, <code>5 + 5</code> es solo otra forma fácil de
  escribir <code>5.+ 5</code>.
  Por ejemplo:</p>

<p><em>Código:</em></p>

<pre><code>puts 'hola '.+ 'mundo'
  puts (10.* 9).+ 9
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>hola mundo
  99
</code></pre>

<p>Esto no es muy lindo, por lo que no vamos a escribir siempre como ahora;
  sin embargo, es importante para entender que sucede <em>realmente</em>.</p>

<p>Esto también nos da un profundo entendimiento de porque podemos hacer
  <code>'pig'*5</code> pero no podemos hacer <code>5*'pig'</code>: <code>'pig'*5</code>
  está diciendo a <code>'pig'</code> de hacer de multiplicando, pero <code>5*'pig'</code>
  está diciendo a <code>5</code> de hacer de multiplicando. <code>'pig'</code> sabe como
  hacer <code>5</code> copias de si mismo y agregar todos ellos juntos; sin embargo,
  <code>5</code> tendrá mucha mas dificultad en tiempo de hacer <code>'pig'</code> copias
  de si <em>mismo</em> y sumarlos a todos juntos.</p>

<p>Y, por supuesto, continuaremos teniendo <code>puts</code> y <code>gets</code> para explicar.
  ¿Dónde están sus objetos? En español, puedes algunas veces dejar fuera el sustantivo;
  por ejemplo, si un villano grita "¡Muere!", el sustantivo implícito es a quien él
  está gritando. En Ruby, si digo <code>puts 'ser o no ser'</code>, lo que realmente estoy
  diciendo es <code>self.puts 'ser o no ser'</code>.</p>

<p>Entonces ¿que es <code>self</code>? Ésta es una variable especial que apunta al objeto en
  el que estás. No siempre sabemos como estar <em>en</em> un objeto, pero hasta que nos
  demos cuenta, siempre iremos a estar en un gran objeto que es... ¡el programa entero! (sin
  embargo en este caso no es posible llamarlo en forma explícita)
  Observa lo siguiente:</p>

<p><em>Código:</em></p>

<pre><code>NoPuedoCreerQueUnaVariableConNombreTanLargoApunteA3 = 3
  puts NoPuedoCreerQueUnaVariableConNombreTanLargoApunteA3
  self.puts NoPuedoCreerQueUnaVariableConNombreTanLargoApunteA3
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>3
  in `&lt;main&gt;': private method `puts' called for main:Object (NoMethodError)
</code></pre>

<p>Si no alcanzaste a comprender todo, está bien. Lo importante es que
  todo método está siendo propiedad de un objeto, incluso si no tiene
  un punto enfrente de este. Si entiendes esto estás preparado.</p>

<h2>
  <a name="m%C3%A9todos-imaginativos-acerca-de-strings" class="anchor" href="#m%C3%A9todos-imaginativos-acerca-de-strings"><span class="mini-icon mini-icon-link"></span></a>Métodos
  imaginativos acerca de Strings</h2>

<p>Vamos a aprender unos pocos pero interesantes métodos. No tienes
  porque memorizar todos; puedes mirar esta pagina de nuevo si te
  olvidas de alguno. Yo sólo quiero mostrarte una <em>pequeña</em>
  parte de lo que puede hacer un texto. De hecho, no recuerdo ni
  siquiera la mitad de los métodos para textos; pero está bien, porque
  hay buenas referencias en internet con todo acerca de textos
  listados y explicados (Voy a mostrarte donde encontrar esas referencias
  al final del tutorial).</p>

<p>Realmente, tampoco <em>quiero</em> saber todo acerca de los métodos para textos;
  sino sería como tratar de conocer cada palabra en el diccionario. Puedo hablar
  español bien sin conocer cada una de las palabras del diccionario... ¿y no es
  ese realmente el objetivo del diccionario? Entonces ¿no <em>tienes</em>
  que conocer que hay en éste?</p>

<p>Entonces, nuestro primer método para texto es <code>reverse</code>,
  el cual nos da una version invertida de un texto:</p>

<p><em>Código:</em></p>

<pre><code>var1 = 'parar'
  var2 = 'subrayado'
  var3 = 'Puedes pronunciar esta oración al reves?'

  puts var1.reverse
  puts var2.reverse
  puts var3.reverse
  puts var1
  puts var2
  puts var3
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>rarap
  odayarbus
  ?sever la nóicaro atse raicnunorp sedeuP
  parar
  subrayado
  Puedes pronunciar esta oración al reves?
</code></pre>

<p>Como puedes ver, <code>reverse</code> no revierte el orden en el string original; éste
  sólo hace una nueva versión de éste en reversa. Esto es porque <code>var1</code> continua
  <code>'parar'</code> aún después de que llamamos <code>reverse</code> sobre <code>var1</code>.</p>

<p>Otro método para texto es <code>length</code>, el cual nos dice el número de caracteres
  (incluyendo caracteres) en el texto:</p>

<p><em>Código:</em></p>

<pre><code>puts 'Cuál es tu nombre completo?'
  name = gets.chomp
  puts '¿Sabes que hay ' + name.length + ' caracteres en tu nombre, ' + name + '?'
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>Cuál es tu nombre completo?
  Christopher David Pine
  #&lt;TypeError: can't convert Fixnum into String&gt;
</code></pre>

<p>¡¡Uhh!! Algo salió mal, y esto parece que ocurrió después la línea
  <code>name = gets.chomp</code>... ¿Puedes ver el problema? Fijate si puedes darte cuenta.</p>

<p>El problema es con <code>length</code>: esto te devuelve un número, pero nosotros queremos
  un texto. Esto es fácil, necesitamos solo agregar <code>to_s</code> (y cruzar nuestros dedos):</p>

<p><em>Código:</em></p>

<pre><code>puts 'Cuál es tu nombre completo?'
  name = gets.chomp
  puts '¿Sabías que hay ' + name.length.to_s + ' caracteres en tu nombre, ' + name + '?'
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>Cuál es tu nombre completo?
  Christopher David Pine
  Sabías que hay 22 caracteres en tu nombre, Christopher David Pine
</code></pre>

<p>No, no conocía esto. <strong>Nota:</strong> esto es el número de
  <em>caracteres</em> en mi nombre, no el número de <em>letras</em>. Supongo
  que podríamos escribir un programa el cual nos pregunte por nuestro primer
  nombre, segundo nombre y apellidos individualmente, y entonces sumar estos tamaños
  todos juntos... hey, ¡porque no haces ésto! Comienza, esperaré.</p>

<p>¿Lo hiciste? ¡Bien! Es un lindo programa, ¿no? Después de unos pocos capítulos más,
  pienso, estarás sorprendido de lo que podrás hacer.</p>

<p>Entonces, hay también un número de métodos para texto los cuales cambian
  el contenido (mayúsculas y minúsculas) de tu texto. <code>upcase</code>
  cambian cada minúscula por mayúscula. <code>swapcase</code> cambia en cada
  letra en el string("Hola".swapcase #=&gt; "hOLA"), y finalmente, <code>capitalize</code>
  es como <code>downcase</code>, excepto que esto cambia solo el primer carácter a
  mayúsculas(si es una letra).</p>

<p><em>Código:</em></p>

<pre><code>letters = 'aAbBcCdDeE'
  puts letters.upcase
  puts letters.downcase
  puts letters.swapcase
  puts letters.capitalize
  puts ' a'.capitalize
  puts letters
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>AABBCCDDEE
  aabbccddee
  AaBbCcDdEe
  Aabbccddee
  a
  aAbBcCdDeE
</code></pre>

<p>Esto es bastante estándar. Como puedes ver desde la linea <code>puts ' a'.capitalize</code>,
  el método <code>capitalize</code> sólo deja en mayúsculas el primer <em>carácter</em>, no
  la primera <em>letra</em>. También, como hemos visto antes, en todas estas llamadas a
  métodos, <code>letters</code> permanece igual. No quiero decir que se dedica sólo a ésto,
  pero es importante entenderlo. Hay algunos métodos los cuales <em>hacen</em> cambios a los
  objetos asociados, pero no los hemos visto aún, y no lo haremos por algún tiempo.</p>

<p>El último tipo de métodos que veremos son los de formato visual. El primero es, <code>center</code>,
  suma espacios al comienzo y final para hacer que este centrado. Sin embargo, sólo tienes
  que decir <code>puts</code> a lo que quieres imprimir, y <code>+</code> a lo que quieres sumar, pero
  tienes que decir a <code>center</code> que ancho tiene que tener el string centrado. Entonces si quiero
  centrar las lineas de un poema, debería hacer algo como esto:</p>

<p><em>Código:</em></p>

<pre><code>lineWidth = 50
  puts( 'Old Mother Hubbard'.center(lineWidth))
  puts( 'Sat in her cupboard'.center(lineWidth))
  puts( 'Eating her curds an whey,'.center(lineWidth))
  puts( 'When along came a spider'.center(lineWidth))
  puts( 'Which sat down beside her'.center(lineWidth))
  puts('And scared her poor shoe dog away.'.center(lineWidth))
</code></pre>

<p><em>Resultado:</em></p>

<pre><code> Old Mother Hubbard
  Sat in her cupboard
  Eating her curds an whey,
  When along came a spider
  Which sat down beside her
  And scared her poor shoe dog away.
</code></pre>

<p>Mmmm.. no pienso que esto es un campamento de verano, pero estoy muy
  cansado para buscar esto. (Entonces, quise alinear la parte
  <code>.center lineWidth</code> , entonces puse esos espacios extras antes
  de los textos. Esto es así sólo porque pienso que es más lindo de
  esta forma. Los programadores generalmente tienen duros conceptos acerca
  de que es lindo en un programa, y a menudo confrontan acerca de esto.
  Cuanto más programes, más lograras tu propio estilo.) Hablando de ser
  perezoso a la hora de programar, lo cual no es siempre algo malo en
  programación. Por ejemplo, fíjate como guardé el ancho del poema en la
  variable <code>lineWidth</code>? Esto es que si entonces quiero regresar
  más tarde y hacer el poema más ancho, solo tengo que cambiar la variable
  al comienzo del programa, antes que en cada línea. Con un poema muy largo,
  esto podría ahorrarme un montón de tiempo. Este tipo de pereza es realmente
  una virtud en programación.</p>

<p>Entonces, acerca del centrado... tú te darás cuenta que esto no es muy
  lindo como podría serlo un procesador de texto. Si realmente quieres un
  perfecto centrado (y quizás una fuente mas linda), entonces deberías
  ¡sólo usar un procesador de textos!. Ruby es una herramienta maravillosa,
  pero no la herramienta correcta para <em>cualquier</em> trabajo.</p>

<p>Los otros dos métodos de formato de textos son <code>ljust</code> y
  <code>rjust</code>, lo cual significan <em>justificado izquierdo</em> y
  <em>justificado derecho</em>. Estos son similares a <code>center</code>,
  excepto que ellos rellenan los lados derecho e izquierdo respectivamente.
  Vamos a verlos en acción:</p>

<p><em>Código:</em></p>

<pre><code>lineWidth = 40
  str = '--&gt; text &lt;--'
  puts str.ljust lineWidth
  puts str.center lineWidth
  puts str.rjust lineWidth
  puts str.ljust(lineWidth/2) + str.rjust(lineWidth/2)
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>--&gt; text &lt;--
  --&gt; text &lt;--
  --&gt; text &lt;--
  --&gt; text &lt;-- --&gt; text &lt;--
</code></pre>

<h2>
  <a name="algunas-cosas-por-intentar" class="anchor" href="#algunas-cosas-por-intentar"><span class="mini-icon mini-icon-link"></span></a>Algunas
  cosas por intentar</h2>

<ul>
  <li><p>Escribe un programa <code>Jefe Enojado</code>. Este debe preguntar de mala
    manera qué quieres. Cualquier cosa que consultes, el Jefe Enojado deberá
    devolverte la consulta de mala forma, y luego despedirte. Por ejemplo,
    si tu escribes <code>Quiero un aumento.</code>, deberá contestarte
    <code>PERO QUE DICES HOMBRE "¿¡¿QUIERES UN AUMENTO."?!? ¡¡ESTAS DESPEDIDO!!</code></p></li>
  <li><p>Entonces aquí hay algo para que puedas jugar un poco más con
    <code>center</code>, <code>ljust</code>, y <code>rjust</code>: Escribe un programa el
    cual muestre una Tabla de Contenidos que se parezca a lo siguiente:</p></li>
</ul>
<p>Listado:</p>

<pre><code> Tabla de Contenidos

  Capítulo 1: Números página 1
  Capítulo 2: Letras página 72
  Capítulo 3: Variables página 118
</code></pre>

<h2>
  <a name="matem%C3%A1ticas-avanzadas" class="anchor" href="#matem%C3%A1ticas-avanzadas"><span class="mini-icon mini-icon-link"></span></a>Matemáticas
  Avanzadas</h2>

<p><em>(Esta sección es totalmente opcional. Asume un conocimiento
  previo de matemáticas. Si no estás interesado, puedes ir directamente
  al siguiente capítulo <%= link_to "Control de Flujo", :controller => :ruby, :action => :controldeflujo %>
  sin problemas. Aunque, una rápida vista de esta sección sobre
  **Números aleatorios</em>* debería venir bien.)*</p>

<p>No hay tantos métodos numéricos como los hay para textos (pienso
  que aun no los conozco a todos sin recurrir a la ayuda de documentación).
  Aquí, vamos a mirar el resto de los métodos aritméticos, un generador
  de números aleatorios, y el objeto <code>Math</code> , con sus métodos trigonométricos
  y transcendentales.</p>

<h2>
  <a name="m%C3%A1s-de-aritm%C3%A9tica" class="anchor" href="#m%C3%A1s-de-aritm%C3%A9tica"><span class="mini-icon mini-icon-link"></span></a>Más
  de aritmética</h2>

<p>Los otros dos métodos aritméticos son <code>**</code> (potencia) y <code>%</code>
  (módulo). Entonces si quieres decir "cinco al cuadrado" en Ruby, deberías
  escribir algo así <code>5**2</code>. También puedes usar flotantes para tus
  exponentes, entonces si quieres una raíz cuadrada de 5, deberías escribir
  <code>5**0.5</code>. Los métodos módulo te dan el sobrante después de una división
  por un número. Entonces, por ejemplo, si divido 7 por 3, obtengo 2 con un remanente
  de 1. Vamos a ver como es que trabaja en un programa:</p>

<p><em>Código:</em></p>

<pre><code>puts 5**2
  puts 5**0.5
  puts 7/3
  puts 7%3
  puts 365%7
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>25
  2.23606797749979
  2
  1
  1
</code></pre>

<p>De la última línea, aprendimos que un año (no bisiesto) tienen algún
  número de semanas, más un día. Entonces si tu cumpleaños fue un Martes
  este año, el próximo año será un Miércoles. Tu también puedes usar
  flotantes con el método módulo (<code>%</code>). Básicamente, funciona de una manera
  lógica... pero voy a mostrar un poco mas como trabajar con esto.</p>

<p>Hay un último método para mencionar antes de revisar el método <code>random</code>:
  <code>abs</code>. Éste sólo toma el valor absoluto de un número:</p>

<p><em>Código:</em></p>

<pre><code>puts((5-2).abs)
  puts((2-5).abs)
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>3
  3
</code></pre>

<h2>
  <a name="n%C3%BAmeros-aleatorios" class="anchor" href="#n%C3%BAmeros-aleatorios"><span class="mini-icon mini-icon-link"></span></a>Números
  aleatorios</h2>

<p>Ruby viene con un lindo generador de números aleatorios. El método para obtener
  un número aleatorio es <code>rand</code>. Si llamas <code>rand</code> , obtendrás un
  número flotante mayor o igual a <code>0.0</code> y menor a <code>1.0</code>. Si
  le proporcionas a <code>rand</code> un número entero (<code>5</code> por ejemplo),
  esto te devolverá un entero mayor o igual a <code>0</code> y menor a <code>5</code>
  (entonces son cinco números posibles, de <code>0</code> a <code>4</code>).</p>

<p>Vamos a ver <code>rand</code> en acción.</p>

<p><em>Código:</em></p>

<pre><code>puts rand
  puts rand
  puts rand
  puts(rand(100))
  puts(rand(100))
  puts(rand(100))
  puts(rand(1))
  puts(rand(1))
  puts(rand(1))
  puts(rand(99999999999999999999999999999999999999999999999999999999999))
  puts('El pronosticador del tiempo dijo que hay '+rand(101).to_s+'% chances de que llueva,')
  puts('pero nunca debes confiar en el.')
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>0.866769322351658
  0.155609260113273
  0.208355946789083
  61
  46
  92
  0
  0
  0
  22982477508131860231954108773887523861600693989518495699862
  El pronosticador del tiempo dijo que hay 47% chances de que llueva,
  pero nunca debes confiar en el.
</code></pre>

<p>Fijate que utilicé <code>rand(101)</code> para obtener números entre <code>0</code>
  y <code>100</code>, y que el <code>rand(1)</code> siempre devuelve <code>0</code>. No
  entender el rango posible de retorno de valores es el error más grande que veo
  en gente que hace <code>rand</code>; aún programadores profesionales, más aún en
  productos finalizados que puedes comprar. Incluso tenía un reproductor de CD
  que si se configuraba en "Reproducción aleatoria," reproducia
  todas las canciones menos la última ... (Me pregunto ¿qué hubiera pasado si hubiera
  puesto un CD con sólo una canción en ella?)</p>

<p>Algunas veces querrás que <code>rand</code> retorne el <em>mismo</em>
  random de números incluso en la misma secuencia en dos diferentes ejecuciones
  de tu programa. (Por ejemplo, una vez estaba utilizando números generados
  aleatoriamente para crear un mundo al azar por un juego de computadoras.
  Encontré un mundo que realmente me gustó, quizás me hubiera gustado jugar de nuevo
  con éste o enviarlo a un amigo.) Con el fin de hacer esto, tu necesitas configurar
  la <em>"generación de éste"</em>, lo que se puede hacer con <code>srand</code>. Como
  lo siguiente:</p>

<p><em>Código:</em></p>

<pre><code>srand 1776
  puts(rand(100))
  puts(rand(100))
  puts(rand(100))
  puts(rand(100))
  puts(rand(100))
  puts ''
  srand 1776
  puts(rand(100))
  puts(rand(100))
  puts(rand(100))
  puts(rand(100))
  puts(rand(100))
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>24
  35
  36
  58
  70

  24
  35
  36
  58
  70
</code></pre>

<p>Esto hará la misma cosa cada vez que inicies con el mismo número. Si quieres
  obtener diferentes números(como pasaría si nunca utilizaras <code>srand</code>),
  entonces sólo llamas a <code>srand 0</code>. Esto inicializa con un número
  realmente raro, utilizando (además de otras cosas) la hora actual de tu
  computadora, hasta los milisegundos.</p>

<h2>
  <a name="el-objeto-math" class="anchor" href="#el-objeto-math"><span class="mini-icon mini-icon-link"></span></a>El
  Objeto <code>Math</code>
</h2>

<p>Finalmente, vamos a echar un vistazo al objeto <code>Math</code>. Deberíamos
  ir directamente a este:</p>

<p><em>Código:</em></p>

<pre><code>puts(Math::PI)
  puts(Math::E)
  puts(Math.cos(Math::PI/3))
  puts(Math.tan(Math::PI/4))
  puts(Math.log(Math::E**2))
  puts((1 + Math.sqrt(5))/2)
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>3.14159265358979
  2.71828182845905
  0.5
  1.0
  2.0
  1.61803398874989
</code></pre>

<p>La primera cosa de la que te habrás dado cuenta es probablemente de
  la notación <code>::</code>. Explicando el <em>alcance del operador</em>
  (que es esto) esta fuera del objetivo de este tutorial.</p>

<p>Como puedes ver, <code>Math</code> tiene todas las cosas que podrías
  esperar de una calculadora científica decente. Y como siempre, los
  flotantes están <em>realmente cerca</em> de ser la respuesta
  correcta.</p>

<p>Entonces ahora vamos a ver <%= link_to "control de flujo", :controller => :ruby, :action => :controldeflujo %>
  .</p></article>
</div>
