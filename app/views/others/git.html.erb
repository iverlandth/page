<article>
<h2>
  <%= link_to '<i class="glyphicon glyphicon-circle-arrow-left"></i>'.html_safe, tutorials_index_path %> Git desde Cero
</h2>

<div>
  <center>
    <%= image_tag "git_github.jpg" %>
  </center>
  </br>

  Cuando se es programador, una de las herramientas que se convierten en nuestras mejores amigas es Git. Se trata de un
  sistema de control de versiones creado por nada más y nada menos que <b>Linus Torvalds</b>, el creador del
  <b>Kernel Linux</b> y es la mejor manera de evitar catástrofes en nuestro código además de ser un excelente gestor del
  trabajo cuando se trabaja en equipo.

  <br/>

  <b>Git</b> principalmente se usa para código, incluso hay lugares en la web (Como <b>BitBucket</b> y <b>GitHub</b>)
  que se dedican a crearnos un <i>frontend</i> para la gestión de nuestro código controlado por Git; Sin embargo, no veo
  razón alguna por la cual Git no pueda ser usado por otras personas para otros ámbitos (diseño, arquitectura, qué se
  yo) en proyectos que requieran trabajar con más de una versión de un archivo y varias modificaciones. Dicho esto,
  aprendamos Git pues:


<br/>

<i><b>NOTA:</b> Para éste tutorial usaré un sistema Linux (Ubuntu) como referencia, pero (exceptuando las instrucciones
  de instalación) las mismas instrucciones de uso de Git aplican para cualquier otra distro Linux, además de para MacOS
  o bien, gente que use CygWin en Windows &nbsp;por ejemplo.</i></div>

<br/>


<b><u>1) Instalando Git</u></b>

<br/>

Para instalar Git en <b>Ubuntu Linux</b> por ejemplo, haríamos lo siguiente en Terminal:


<br/>

<div>
<pre><span>sudo apt-get install git git-core</span>
</pre>
</div>


<br/>
<b><u>2) &#191;Primera vez? Configura tus Opciones</u></b><br/>
<br/>
Ahora tendremos que correr éstos comandos (Globales entre sistemas) para configurar nuestras opciones de Git:<br/>
<br/>

<div>


      <pre>1 <span>git config --global user.name</span> <span style="color: #0086d2;">"Tu Nombre"</span>
2 <span>git config --global user.email tu-email@servicio.com</span>
</pre>


</div>
<br/>
<i>Como podrán notar, el nombre va entre comillas, el e-mail no.</i><br/>
<br/>
<b><u>3) Editor predeterminado</u></b><br/>
<br/>
Cuando necesitemos añadir un mensaje a nuestros Commits y no lo hagamos directamente desde consola por ejemplo,
necesitamos que un editor aparezca y nos recuerde/permita hacerlo, para configurar ésta opción hacemos:<br/>
<br/>

<div >
<pre ><span>git config --global core.editor</span> <span style="color: #0086d2;">"editor"</span>
</pre>
</div>
<br/>
Algunas opciones a usar en lugar de <b>"editor"</b> son por ejemplo:&nbsp;<b>subl -w</b> (Para <i>SublimeText</i> en
todas las plataformas) <b>mate -w</b> (Para <i>TextMate</i> en Mac) <b>gvim -f</b> &nbsp;(Para <i>GVim</i> en Linux) o
bien,&nbsp;<b>mvim -f</b> (Para <i>MacVim</i> en Mac). Recuerda que debes seleccionar una opción según tu sistema
operativo y asegurarte de que el editor está instalado... Para Linux por ejemplo usaremos <i>GVim</i> y lo instalaremos
de la siguiente manera antes de establecer la opción (en Ubuntu):<br/>
<span style="color: #f3f3f3;"><br/></span>

<div>
  <pre><span>sudo apt-get install vim vim-gtk vim-gnome</span></pre>
</div>
<br/>
<b>4) Nuestro primer Repo!</b><br/>
<br/>
Ahora sí, es hora de empezar a trabajar con Git para conocer sus beneficios: Crea una <b>nueva carpeta</b> en algún
lugar y añade unos <b>2 o 3 archivos de texto</b> (o HTML o de cualquier tipo de script o código que quieras) además de
una imagen <b>.jpg o .png</b> por ejemplo, una <b>carpeta vacía</b>&nbsp;(con el nombre <b>"empty"</b>) y un
<b>archivo vacío</b> con extensión <b>".dumm" </b>(y de nombre "archivo")&nbsp;jaja.<b>&nbsp;</b>En tu terminal haz
<b>cd</b> hacia la ruta de la carpeta donde pusiste todo, luego inicializa un repositorio Git... Éstos dos pasos se
hacen así:<br/>
<br/>

<div>
      <pre>1 <span><span>cd ruta/a/carpeta</span>
2 <span>git init</span>
</span></pre>

</div>
<br/>
<b><u>5) Git Ignore</u></b><br/>
<br/>
Por defecto, Git siempre toma todo el contenido de la carpeta del proyecto donde se inicializó el repo y lo utiliza
cuando trabajamos con el repositorio... El problema con ésto es que hay ciertos archivos que ciertamente no queremos en
nuestro repositorio o es más, no queremos que se les tome en cuenta porque son constantemente cambiados. Éstos son
aquellos como por ejemplo los "Logs" o también, el famoso "Thumbs.db" en Windows por solo mencionar algunos. Para evitar
que éstos archivos se nos interpongan, tenemos que crear un archivo llamado <b>.gitignore</b>&nbsp;(obviamente oculto)
en la raíz de la carpeta del proyecto y debe de tener el siguiente formato según nuestras necesidades:<br/>
<br/>

<div>
<pre># Ignorando grupos de archivos individuales por extensión

rutas/de/locación/*.extensión

# Ignorando una Carpeta

ruta/a/carpeta/ignorada

# Ignorando un Archivo Individual

ruta/a/archivo.ext
</pre>
</div>
<br/>
Si ésto de arriba no tuvo mucho sentido para ti, veamos un ejemplo: Por decir, supongamos que quiero evitar que Git
cargue las imágenes que puse en mi carpeta de ejemplo que hice arriba, el archivo ".dumm" que me inventé y la carpeta
vacía. Mi archivo <i><b>.gitignore</b></i> quedaría algo así:<br/>
<br/>

<div>
<pre># Ignorando JPG's y PNG's

/*.jpg
/*.jpeg
/*.png

# Ignorando la Carpeta Vacía

/empty

# Ignorando un Archivo Individual

/archivo.dumm
</pre>
</div>
<br/>
Si estás acostumbrado a trabajar con rutas de carpetas en Linux o MacOS por ejemplo, entonces éste archivo no te
parecerá raro: es lo mismo. La única diferencia es que toma como Raíz a la carpeta del proyecto y de ahí uno selecciona
los archivos que quiere ignorar. En el caso de querer ignorar en base a &nbsp;las extensiones usamos el comodín
<b>(*)</b> para que ignore todos los archivos que sean de ésa extensión. Si te das cuenta, en ningún momento pasamos
parámetros (Como -R) puesto que Git está muy bien configurado y hará su trabajo a la perfección de manera
<i>recursiva</i>, ésto quiere decir que aplicará las reglas adecuadas en directorios y subdirectorios (además de en
todos sus archivos) cuando se amerite según nuestras instrucciones del archivo <b>.gitignore</b>.<br/>
<br/>
<b><u>6) Añadiendo archivos</u></b><br/>
<br/>
Lo siguiente que se hace es añadir los archivos a nuestro <i>árbol git</i>. Dentro de la terminal (estando en la ruta de
la raíz de nuestro proyecto) hacemos lo siguiente:<br/>
<br/>

<div>
<pre><span>git add .</span>
</pre>
</div>
<br/>
Éso es simplemente para hacer que todos los archivos (nuevos y modificados) sean añadidos a una especie de "lista de
espera" de Git. El mismo comando lo tenemos que correr al borrar y/o añadir archivos/carpetas para que git tome en
cuenta las modificaciones en el proyecto.<br/>
<br/>
<b><u>7) Haciendo válidos los cambios</u></b><br/>
<br/>
Ahora tenemos que realizar un <i>commit</i>, para hacer válidos los cambios en nuestro proyecto. Ésto se hace con:<br/>
<br/>

<div>
<pre><span >git commit -m</span> <span style="color: #0086d2;">"Mensaje"</span>
</pre>
</div>
<br/>
Lo que va después de <b>-m</b> es el mensaje que describe a éste commit, siempre hagan sus commits con un mensaje de
preferencia. Si no quieren añadir mensaje, omitan el <b>-m</b>. <i>git commit</i> hace válidos los cambios de manera
<b>Local</b> en nuestro árbol del proyecto.<br/>
<br/>
<i><b>NOTAS:</b> Cabe destacar que puedes usar los comandos <b>git status</b> y <b>git log</b> para monitorizar tu
  proyecto con Git de cuando en cuando. Por otro lado, si haces cambios menores en tu proyecto (como renombrar archivos,
  editarlos etc) Puedes usar el siguiente comando para añadir y hacer el commit:</i><br/>
<br/>

<div>
<pre><span>git commit -a -m</span> <span style="color: #0086d2;">"Mensaje"</span>
</pre>
</div>
<br/>
<i>Pero recuerda que si haces cambios importantes (Como añadir nuevos archivos o eliminar otros por ejemplo) debes de
  usar el comando de<b> add .</b> y luego el de <b>commit</b> como lo harías regularmente.</i><br/>
<br/>
<b><u>8) Git y su Utilidad</u></b><br/>
<br/>
Supongamos que por alguna razón eliminaste de manera forzada e irrecuperable (<b>rm -rf</b> jajajaja) algún archivo o
carpeta de tu proyecto desde tu último commit. Bueno, pues siempre puedes volver al último <i>snapshot</i> de tu código
(es decir, al código como estaba al momento de realizar el último commit registrado) con el comando:<br/>
<br/>

<div>
<pre><span>git checkout -f</span>
</pre>
</div>
<br/>
El parámetro <b>-f </b>hace que git force a sobreescribir los cambios hechos por accidente en el proyecto y se restauren
los archivos y carpetas de nuestro último <i>commit</i>.<br/>
<br/>
<b><u>9) A la Nube!</u></b><br/>
<br/>
Todo ésto que hemos estado viendo es en el ámbito Local. Pero, &#191;Qué pasa si estoy colaborando con varios
programadores en un mismo proyecto? Qué tal si quiero tener un backup de mi código en alguna parte que no sea mi PC? Qué
tal si quiero que más y más gente me conozca y tenga acceso a lo que hago? Aquí es donde entran en juego los servicios
de almacenamiento de repositorios Git como podrían ser <b><a href="https://github.com/">GitHub</a></b> y
<b><a href="https://bitbucket.org/">BitBucket</a></b> o bien, <b><a href="https://gitorious.org/">Gitorious</a></b>.
Personalmente, prefiero <b>BitBucket</b> debido a que ofrece prácticamente las mismas funciones que GitHub y similares
además de algunas ventajas que se agradecen, como el hecho de poder tener todos los repositorios públicos y privados que
quieras completamente gratis. Es por ésto que&nbsp;en éste tutorial usaremos ése servicio, pero estás en libertad de
irte con el que más te convenza.<br/>
<br/>
Lo primero que haremos será sacar una cuenta de <i>BitBucket</i> en
<b><a href="http://bitbucket.org/">bitbucket.org</a></b>, configuraremos nuestras preferencias y validaremos la cuenta.
Más adelante, crearemos un nuevo repositorio PRIVADO que funcione con Git como control de versiones:<br/>
<br/>

<div class="separator" style="clear: both; text-align: center;">
  <a href="http://4.bp.blogspot.com/-J6VUAXK4GD8/T8Ogt3poIBI/AAAAAAAACbg/vgcPVCvlzRQ/s1600/Selecci%C3%B3n_014.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="379" src="https://lh3.ggpht.com/-J6VUAXK4GD8/T8Ogt3poIBI/AAAAAAAACbg/vgcPVCvlzRQ/s640/Selecci%C3%B3n_014.png" width="640"/></a>
</div>
<div class="separator" style="clear: both; text-align: center;">
  <br/></div>
<div class="separator" style="clear: both; text-align: left;">
  <br/></div>
<div class="separator" style="clear: both; text-align: left;">
  Le ponemos un nombre, seleccionamos un lenguaje (la selección de lenguaje ahorita es indiferente, pero trata de
  seleccionarlo según el tipo de lenguaje más utilizado en tu proyecto) y de momento no marcamos ni Wiki ni Issue
  Tracking, pues no los vamos a usar. Añadimos una descripción y nuestra web si así lo queremos también.
</div>
<div class="separator" style="clear: both; text-align: left;">
  <br/></div>
<div class="separator" style="clear: both; text-align: left;">
  <b><u>10) Git Push</u></b></div>
<div class="separator" style="clear: both; text-align: left;">
  <br/></div>
<div class="separator" style="clear: both; text-align: left;">
  Una vez teniendo un lugar en la web que nos sirva de alojamiento para nuestro repo, tenemos que pasar nuestros cambios
  a la web, así como hacemos <i>commits</i> locales. Justo después de hacer un commit local, si uno quiere que ésos
  cambios pasen a la nube (usando bitbucket) hace:
</div>
<div class="separator" style="clear: both; text-align: left;">
  <br/></div>
<div>

      <pre>1 <span><span>git remote add origin https://usuario@bitbucket.org/usuario/repo.git</span>
2 <span>git push -u origin master</span>
</span></pre>

</div>
<br/>
<i>Reemplazando "usuario" por tu nombre de usuario en bitbucket y "repo" por el nombre del repo hacia donde quieres
  enviar tu código.</i><br/>
<br/>
Y eso hará que Git sepa que tiene que subir la rama principal del proyecto (es decir todo el proyecto pues) a
<b>BitBucket</b>. Para fines prácticos (no tener que introducir credenciales) uno usa integración con <b>SSH</b> pero
eso está para explicarse en otra ocasión. También debo recalcar que el comando 1 se tiende a usar una sola vez cada que
añadimos un nuevo origen remoto (por cada repo inicializado) según las instrucciones que se nos hayan dado en el mismo,
y el 2 pasa a ser simplemente <i>git push</i> en la mayoría de sistemas tras haberlo usado como aquí se muestra la
primera vez en cada repo inicializado.<br/>
<br/>
<b><u>11) Branching</u></b><br/>
<br/>
Imaginemos a nuestro proyecto en Git como un árbol donde la raíz es el proyecto principal y de ahí crecen varias ramas.
El branching en Git es justo lo que te imaginarás: Se trata de crear ramificaciones del proyecto en base a copias del
código del proyecto original en las cuales podemos realizar modificaciones sin preocuparnos por comprometer el proyecto
en sí. Ésto quiere decir que si yo tengo un proyecto en el cual se me ocurre añadir una nueva característica que quizá
no sea lo suficientemente confiable a nivel estabilidad puedo hacerlo en una rama de mi proyecto y dejar el original
intacto. Para crear ramas, usamos el siguiente comando:<br/>
<br/>

<div>
<pre><span>git checkout -b NombredeRama</span>
</pre>
</div>
<br/>
Donde <b>"NombredeRama"</b> es el nombre que le pondremos a nuestra rama que se creará entonces. Podemos usar el comando
<b>git branch</b> para saber en qué rama estamos trabajando actualmente en el proyecto. Si queremos saltar de rama en
rama, usamos el comando:<br/>
<br/>

<div>
<pre><span>git checkout rama</span>
</pre>
</div>
<br/>
Donde reemplazaremos <b>"rama"</b> (obviamente) por el nombre de la rama a la que queramos saltar.<br/>
<br/>
<b><u>12) Merging</u></b><br/>
<br/>
Supongamos que creaste una rama nueva donde hiciste algunas modificaciones que resultaron ser una buena idea y quieres
que el proyecto original (rama master) las integre. Para ésto sirve el <i>merging</i>... Si queremos combinar 2 ramas,
nos moveremos a la rama donde queramos integrar el código nuevo (en el ejemplo la master) y haremos el merge con:<br/>
<br/>

<div>
<pre><span>git merge Rama-a-Mezclar
</span></pre>
</div>
<br/>
Donde <b>"Rama-a-Mezclar"</b> es el nombre de la rama que mezclaremos con la rama a la que nos movimos. Si vamos a
mezclar <b>"ramapatito"</b> con <b>"master"</b> por ejemplo entonces haríamos:
<br/>
<br/>

<div>
  <pre>1 <span><span>git checkout master</span>
2 <span>git merge ramapatito</span>
</span></pre>

</div>
<br/>
Y eso añadiría los cambios realizados en <b>"ramapatito"</b> a la rama principal del proyecto.<br/>
<br/>
<b><u>13) Borrando Ramas</u></b><br/>
<br/>
Cuando queramos borrar una rama que ya haya sido mezclada, lo haremos con:<br/>
<br/>

<div>
<pre><span>git branch -d Rama</span>
</pre>
</div>
<br/>
<i>Donde "Rama" es obviamente el nombre de la rama...</i><br/>
<br/>
Y si queremos borrar una rama que no ha sido mezclada tendríamos que usar <b>-D</b> en lugar de <b>-d</b> como en el
ejemplo de arriba. Ojo que ésto no elimina los archivos mezclados, sino simplemente la rama como contenedor, para
eliminar los archivos mezclados (si al final no te gustó) harías un<i> rollback</i> como mostramos en el paso 8.<br/>
<br/>
Básicamente esas son las opciones fundamentales de Git y para qué nos sirve cada una. Espero que éste tutorial haya sido
de su agrado y que a partir de ahora valoren la posibilidad de usar Git para sus proyectos... Quieras que no, te permite
tener un ambiente de trabajo más ordenado y tranquilo.
<div style='clear: both;'></div>
</div>
</article>
by Xenode