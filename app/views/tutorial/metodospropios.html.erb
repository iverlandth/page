<div id="readme" class="blob instapaper_body">
<article class="container" itemprop="mainContentOfPage"><h1>
  <a name="m%C3%A9todos-propios" class="anchor" href="#m%C3%A9todos-propios"><span class="mini-icon mini-icon-link"></span></a>Métodos Propios</h1>

<p>Como hemos visto anteriormente, los bucles e iteradores
  nos permiten hacer lo mismo (o ejecutar el mismo código) una y
  otra vez.  Sin embargo, a veces queremos hacer algo una determinada
  cantidad de veces pero desde distintos lugares en el
  programa. Por ejemplo, supongamos que estamos escribiendo un
  programa que hace un cuestionario para un estudiante de
  sicología. De los estudiantes de sicología que he conocido y
  de los cuestionarios que me han dado, esto sería algo similar
  a:</p>

<p><em>Código:</em></p>

<pre><code>puts 'Hola, y gracias por tomarse el tiempo para'
  puts 'que me ayude con este experimento. Mi experimento'
  puts 'tiene que ver con tu gusto acerca de'
  puts 'la comida mexicana. Basta con pensar en la comida mexicana'
  puts 'y tratar de contestar todas las preguntas con honestidad,'
  puts 'ya sea con un "sí" o un "no". Mi experimento'
  puts 'no tiene nada que ver con mojar la cama.'
  puts

  #  Preguntaremos, pero ignoraremos sus respuestas.

  buenaRespuesta = false
  while (not buenaRespuesta)
  puts '¿Te gusta comer tacos?'
  respuesta = gets.chomp.downcase
  if (respuesta == 'si' or respuesta == 'no')
  buenaRespuesta = true
  else
  puts 'Por favor, responda "si" o "no".'
  end
  end

  buenaRespuesta = false
  while (not buenaRespuesta)
  puts '¿Te gusta comer burritos?'
  respuesta = gets.chomp.downcase
  if (respuesta == 'si' or respuesta == 'no')
  buenaRespuesta = true
  else
  puts 'Por favor, responda "si" o "no".'
  end
  end

  #  Presta atención a *esta* respuesta.
  buenaRespuesta = false
  while (not buenaRespuesta)
  puts '¡Mojas la cama?'
  respuesta = gets.chomp.downcase
  if (respuesta == 'si' or respuesta == 'no')
  buenaRespuesta = true
  if respuesta == 'si'
  mojasLaCama = true
  else
  mojasLaCama = false
  end
  else
  puts 'Por favor, responda "si" o "no".'
  end
  end

  buenaRespuesta = false
  while (not buenaRespuesta)
  puts '¿Te gusta comer chimichangas?'
  respuesta = gets.chomp.downcase
  if (respuesta == 'si' or respuesta == 'no')
  buenaRespuesta = true
  else
  puts 'Por favor, responda "si" o "no".'
  end
  end

  puts 'Solo una cuantas preguntas más...'

  buenaRespuesta = false
  while (not buenaRespuesta)
  puts '¿Te gusta comer sopapillas?'
  respuesta = gets.chomp.downcase
  if (respuesta == 'si' or respuesta == 'no')
  buenaRespuesta = true
  else
  puts 'Por favor, responda "si" o "no".'
  end
  end

  #  Preguntas otras cosas sobre la comida mexicana.

  puts
  puts 'Interrogatorio:'
  puts 'Gracias por tomarse el tiempo para ayudar con'
  puts 'este experimento. De hecho, este experimento'
  puts 'no tiene nada que ver con la comida mexicana. Es'
  puts 'un experimento sobre mojar la cama. La comida mexicana'
  puts 'ahí para atraparte con la guardia baja'
  puts 'con la esperanza de que respondería más'
  puts 'honestamente. Gracias de nuevo.'
  puts
  puts mojasLaCama
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>Hola, y gracias por tomarse el tiempo para
  que me ayude con este experimento. Mi experimento
  tiene que ver con tu gusto acerca de
  la comida mexicana. Basta con pensar en la comida mexicana
  y tratar de contestar todas las preguntas con honestidad,
  ya sea con un "sí" o un "no". Mi experimento
  no tiene nada que ver con mojar la cama.

  ¿Te gusta comer tacos?
  si
  ¿Te gusta comer burritos?
  si
  ¡Mojas la cama?
  de ninguna manera
  Por favor, responda "si" o "no".
  ¡Mojas la cama?
  NO
  ¿Te gusta comer chimichangas?
  si
  Solo una cuantas preguntas más...
  ¿Te gusta comer sopapillas?
  si

  Interrogatorio:
  Gracias por tomarse el tiempo para ayudar con
  este experimento. De hecho, este experimento
  no tiene nada que ver con la comida mexicana. Es
  un experimento sobre mojar la cama. La comida mexicana
  ahí para atraparte con la guardia baja
  con la esperanza de que respondería más
  honestamente. Gracias de nuevo.

  false
</code></pre>

<p>Ese fue un programa bastante largo, con mucha repetición.
  (Todas las secciones de código sobre las preguntas de comida
  mexicana eran idénticas, y la pregunta sobre mojar la cama fue
  la única pregunta algo diferente).
  La repetición es mala. Sin embargo, no podemos transformar el
  código en un gran bucle o iterador, porque a veces queremos
  hacer algo entre las preguntas. En situaciones como estas,
  es mejor escribir un método. Aquí está como:</p>

<pre><code>def decirMu
  puts 'muuuuuu...'
  end
</code></pre>

<p>Uy... nuestro programa no hizo <code>muuuuuu</code>. ¿Por qué no?, Porque no le dijimos que lo hiciera.
  Le dijimos <em>cómo</em> hacer <code>muuuuuu</code>, pero nunca le dijimos en realidad que lo <em>haga</em>.
  Intentemos otra vez:</p>

<p><em>Código:</em></p>

<pre><code>def decirMu
  puts 'muuuuuu...'
  end

  decirMu
  decirMu
  puts 'coin-coin'
  decirMu
  decirMu
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>muuuuuu...
  muuuuuu...
  coin-coin
  muuuuuu...
  muuuuuu...
</code></pre>

<p>Ah, mucho mejor. (En caso que no hables francés, eso fue un pato francés en medio del programa. En
  Francia los patos dicen <em>coin-coin</em>.)</p>

<p>Por lo tanto, <code>def</code>inimos el método de <code>decirMu</code>. (Nombres de los métodos, al igual que
  los nombres de variables, comienzan con letras minúsculas. Hay unas pocas excepciones, tales
  como <code>+</code> o <code>==</code>.) ¿Pero los métodos no siempre tienen que estar asociados con objetos?.
  Bueno, sí, y en este caso (como sucede con <code>puts</code> y <code>gets</code>), el método sólo está
  asociado con el objeto que representa la totalidad del programa. En el próximo
  capítulo veremos cómo agregar métodos a otros objetos. Pero primero ...</p>

<h2>
  <a name="par%C3%A1metros-del-m%C3%A9todo" class="anchor" href="#par%C3%A1metros-del-m%C3%A9todo"><span class="mini-icon mini-icon-link"></span></a>Parámetros del Método</h2>

<p>Habrás notado que algunos métodos (como <code>gets</code>, <code>to_s</code>, <code>reverse</code>...) solo pueden
  ser llamados en un objeto. Sin embargo, otros métodos (como <code>+</code> , <code>-</code> , <code>puts</code>...) toman
  los <em>parámetros</em> para decir al objeto que hacer con el método. Por ejemplo, no sólo
  le diría <code>5+</code>, ¿verdad? Le estás pidiendo 5 que agregue, pero no le estás diciendo
  lo que va a agregar.</p>

<p>Para agregar un parámetro a <code>decirMu</code> (digamos, el número de muuuuuu), haríamos lo siguiente:</p>

<p><em>Código:</em></p>

<pre><code>def decirMu numeroDeMus
  puts 'muuuuuuu...'*numeroDeMus
  end

  decirMu 3
  puts 'oink-oink'
  decirMu  #  Esto debería dar un error porque falta el parámetro.
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>muuuuuuu...muuuuuuu...muuuuuuu...
  oink-oink
  in `decirMu': wrong number of arguments (0 for 1) (ArgumentError)
</code></pre>

<p><code>numeroDeMus</code> es una variable que apunta al parámetro que se le ha pasado, lo voy a decir de nuevo,
  pero es un poco confuso: <code>numeroDeMus</code> es una variable que apunta al parámetro pasado. Por lo
  tanto, si digito <code>decirMu 3</code>, el parámetro es 3, y la variable <code>numeroDeMus</code> apunta a 3.</p>

<p>Como puedes ver, el parámetro es ahora <em>requerido</em>. Después de todo, lo que <code>decirMu</code> hace es multiplicar
  <code>'muuuuuu...</code> ¿pero, si no le dan un parámetro? Tu pobre computadora no tiene ni idea de que hacer.</p>

<p>Si los objetos en Ruby son como los nombres en español, y los métodos son como los verbos,
  entonces se puede pensar en parámetros como adverbios (como con <code>decirMu</code>, donde el parámetro
  nos dice como se afecta <code>decirMu</code>) o a veces como objetos directos (por ejemplo con ´puts´, donde
  el parámetro es lo que se <em>muestra</em>)</p>

<h2>
  <a name="variables-locales" class="anchor" href="#variables-locales"><span class="mini-icon mini-icon-link"></span></a>Variables Locales</h2>

<p>En el siguiente programa hay dos variables:</p>

<p><em>Código:</em></p>

<pre><code>def duplicaEsto num
  numeroVeces2 = num*2
  puts num.to_s+' el doble es '+numeroVeces2.to_s
  end

  duplicaEsto 44
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>44 el doble es 88
</code></pre>

<p>Las variables son <code>num</code> y <code>numeroVeces2</code>.
  Los dos se encuentran dentro del método <code>duplicaEsto</code>. Estas (y todas las variables
  que hemos visto hasta ahora) son las <em>variables locales</em>. Esto significa que ellos viven
  dentro del método y no pueden salir. Si lo intentas obtendrás un error:</p>

<p><em>Código:</em></p>

<pre><code>def duplicaEsto num
  numeroVeces2 = num*2
  puts num.to_s+' el doble es '+numeroVeces2.to_s
  end

  duplicaEsto 44
  puts numeroVeces2.to_s
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>44 el doble es 88
  in `&lt;main&gt;': undefined local variable or method `numeroVeces2' for main:Object (NameError)
</code></pre>

<p>Variable local no definida ... De hecho, nos <em>hicieron</em> definir esa variable local, pero
  no es local donde traté de usarlo, es local en el método.</p>

<p>Esto podría ser un inconveniente, pero en realidad es bastante bueno. Significa que no tienes
  acceso a las variables dentro de los métodos y también significa
  que ellos no tienes acceso a <em>tus</em> variables y por lo tanto no pueden meter la pata:</p>

<p><em>Código:</em></p>

<pre><code>def pequenaMascota var
  var = nil
  puts '¡HAHA!  ¡He malogrado tu variable!'
  end

  var = '¡Tu ni siquiera puedes tocar mi variable!'
  pequenaMascota var
  puts var
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>¡HAHA!  ¡He malogrado tu variable!
  ¡Tu ni siquiera puedes tocar mi variable!
</code></pre>

<p>En realidad, hay <em>dos</em> variables en el programa que se llaman <code>var</code>: uno en el
  interior de <code>pequenaMascota</code> y otro fuera de él. Cuando llamamos a <code>pequenaMascota var</code>, nosotros
  en realidad pasamos de un <code>var</code> a otro de manera que ambos están apuntando al mismo texto.
  Luego <code>pequenaMascota</code> apuntó a su propio <code>var</code> local a <code>nil</code>, pero que no hizo nada al <code>var</code>
  que está fuera del método.</p>

<h2>
  <a name="valores-de-retorno" class="anchor" href="#valores-de-retorno"><span class="mini-icon mini-icon-link"></span></a>Valores de Retorno</h2>

<p>Puedes haber notado que algunos métodos envían algo de regreso cuando son llamados.
  Por ejemplo, <code>gets</code> <em>retorna</em> una cadena (la cadena que escribiste), y el método <code>+</code> en
  <code>5+3</code>, (que es en realidad <code>5.+(3)</code>) devuelve <code>8</code>. Los métodos aritméticos para
  los números retornan números y los métodos aritméticos para los textos devuelven textos.</p>

<p>Es importante entender la diferencia entre los métodos que devuelven un valor al método
  que lo llamó, y lo que el programa muestra en la pantalla como hace <code>puts</code>. Ten en
  cuenta que <code>5+3</code> retorna <code>8</code>, cosa que <em>no</em> hace la salida <code>8</code>.</p>

<p>Entonces, ¿qué es lo que <em>hace</em> <code>puts</code> al retornar? No nos importó antes, pero vamos a ver ahora:</p>

<p><em>Código:</em></p>

<pre><code>valorRetorno = puts 'Esto es lo que puts retorna:'
  puts valorRetorno
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>Esto es lo que puts retorna:
  cero
</code></pre>

<p>Así que el primer <code>puts</code> retornó <code>nil</code>. A pesar de que no lo prueba, el segundo <code>puts</code>
  también lo hizo, <code>puts</code> siempre retorna <code>nil</code>. Cada método tiene que devolver algo,
  incluso si es valor es solo <code>nil</code>.</p>

<p>Tómate un descanso rápido y escribe un programa para averiguar lo que <code>decirMu</code> devuelve.</p>

<p>¿Te sorprendió? Bueno, así es como funciona: el valor devuelto por un método no es más que
  la última línea del método. En el caso de <code>decirMu</code>, esto significa que devuelve
  <code>puts "muuuuuu... '* Los numeroDeMus</code>, lo cual es simplemente <code>nil</code> ya que <code>puts</code> siempre
  devuelve <code>nil</code>. Si queremos que todos nuestros métodos devuelvan el texto <code>'submarino amarillo'</code>,
  sólo tenemos que ponerla al final de ellos:</p>

<p><em>Código:</em></p>

<pre><code>def decirMu numeroDeMus
  puts 'muuuuuu...'*numeroDeMus
  'submarino amarillo'
  end

  x = decirMu 2
  puts x
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>muuuuuu... muuuuuuu...
  submarino amarillo
</code></pre>

<p>Vamos a tratar con el experimento de sicología otra vez, pero esta vez vamos a
  escribir un método que haga las preguntas por nosotros. Se tendrá que tomar la pregunta
  como un parámetro, y devolver <code>true</code> si contestan que <code>sí</code>, y <code>false</code> si responden que <code>no</code>.
  (Aún cuando la mayoría de veces ignoramos la respuesta, sigue siendo una buena idea
  que nuestro método devuelva la respuesta. De esta manera se puede utilizar para la pregunta
  de mojar la cama también.) También voy a acortar el saludo y el interrogatorio de manera
  que sea más fácil de leer:</p>

<p><em>Código:</em></p>

<pre><code>def preguntar pregunta
  buenarespuesta = false
  while (not buenarespuesta)
  puts pregunta
  reply = gets.chomp.downcase

  if (reply == 'si' or reply == 'no')
  buenarespuesta = true
  if reply == 'si'
  answer = true
  else
  answer = false
  end
  else
  puts 'Por favor, responder "si" o "no".'
  end
  end

  answer  #  Esto es lo que retorna (`true` o `false`).
  end

  puts 'Hola, y gracias por...'
  puts

  preguntar '¿Te gusta comer tacos?'      #  Ignoramos la respuesta.
  preguntar '¿Te gusta comer burritos?'
  mojasLaCama = preguntar '¿Mojas la cama?'  #  Salvamos el valor retornado.
  preguntar '¿Te gusta comer chimichangas?'
  preguntar '¿Te gusta comer sopapillas?'
  preguntar '¿Te gusta comer tamales?'
  puts 'Solo unas preguntas mas...'
  preguntar '¿Te gusta beber horchata?'
  preguntar '¿Te gusta comer flautas?'

  puts
  puts 'Interrogatorio:'
  puts 'Gracias por...'
  puts
  puts mojasLaCama
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>¿Te gusta comer tacos?
  si
  ¿Te gusta comer burritos?
  si
  ¿Mojas la cama?
  de ninguna manera
  Por favor, responder "si" o "no".
  ¿Mojas la cama?
  NO
  ¿Te gusta comer chimichangas?
  si
  ¿Te gusta comer sopapillas?
  si
  ¿Te gusta comer tamales?
  si
  Solo unas preguntas mas...
  ¿Te gusta beber horchata?
  si
  ¿Te gusta comer flautas?
  si

  Interrogatorio:
  Gracias por...

  false
</code></pre>

<p>No está mal, ¿eh?. Hemos sido capaces de añadir más preguntas (y la adición de
  preguntas ahora es <em>fácil</em>), y nuestro programa es aún más corto!. Es una gran mejora -
  El sueño de un programador perezoso.</p>

<h2>
  <a name="un-ejemplo-m%C3%A1s-grande" class="anchor" href="#un-ejemplo-m%C3%A1s-grande"><span class="mini-icon mini-icon-link"></span></a>Un ejemplo más grande</h2>

<p>Creo que otro método como ejemplo podría ser útil aquí. Llamaremos
  a este <em>numeroEnEspanol</em>. Se llevará un número, como <code>22</code>, y devolverá
  la versión en español de la misma (en este caso el texto de <code>'veintidós'</code>)
  Por ahora, vamos a trabajar solamente con números enteros entre 0 a 100.</p>

<p><em>(</em>*NOTA:** Este método utiliza un nuevo truco para retornar en forma temprana
  en el método usando <code>return</code> e introduce un nuevo giro en las bifurcaciones: <code>elsif</code>.
  Debe quedar claro en el contexto de cómo funcionan estos.)*</p>

<p><em>Código:</em></p>

<pre><code>def numeroEnEspanol numero
  #  Solo estamos considerando los números de 0-100.
  if numero &lt; 0
  return 'Por favor ingrese un numero mayor o igual a cero.'
  end
  if numero &gt; 100
  return 'Por favor ingrese un numero menor o igual a 100'
  end

  numeroDeTexto  = ''  #  Esta es el texto que retorna.

  #  "izquierda" es cuanto del número aún falta escribir.
  #  "escrito" es la parte que estamos escribiendo en estos momentos.
  #  escrito y izquierda... lo captas?  :)
  izquierda  = numero
  escrito = izquierda/100          #  Cuantos cientos faltan escribir?
  izquierda  = izquierda - escrito*100  #  Restar estos cientos.

  if escrito &gt; 0
  return 'cien'
  end

  escrito = izquierda/10          #  Cuantas decenas faltan escribir?
  izquierda  = izquierda - escrito*10  #  Restar las decenas.

  if escrito &gt; 0
  if escrito == 1  #  Ah-ah...
  #  No podemos escribir "diezidos" en lugar de "doce",
  #  hemos realizado una excepción especial .
  if    izquierda == 0
  numeroDeTexto = numeroDeTexto + 'diez'
  elsif izquierda == 1
  numeroDeTexto = numeroDeTexto + 'once'
  elsif izquierda == 2
  numeroDeTexto = numeroDeTexto + 'doce'
  elsif izquierda == 3
  numeroDeTexto = numeroDeTexto + 'trece'
  elsif izquierda == 4
  numeroDeTexto = numeroDeTexto + 'catorce'
  elsif izquierda == 5
  numeroDeTexto = numeroDeTexto + 'quince'
  elsif izquierda == 6
  numeroDeTexto = numeroDeTexto + 'dieciseis'
  elsif izquierda == 7
  numeroDeTexto = numeroDeTexto + 'diecisiete'
  elsif izquierda == 8
  numeroDeTexto = numeroDeTexto + 'dieciocho'
  elsif izquierda == 9
  numeroDeTexto = numeroDeTexto + 'diecinueve'
  end
  #  Desde que ya tomamos el digito faltante,
  #  ya no tenemos nada que escribir.
  izquierda = 0
  elsif escrito == 2
  #  Como no podemos decir "veinteiuno",
  #  tenemos que eliminar la "e" final.
  if izquierda == 0
  numeroDeTexto = numeroDeTexto + 'veinte'
  else
  numeroDeTexto = numeroDeTexto + 'veint'
  end
  elsif escrito == 3
  numeroDeTexto = numeroDeTexto + 'treinta'
  elsif escrito == 4
  numeroDeTexto = numeroDeTexto + 'cuartenta'
  elsif escrito == 5
  numeroDeTexto = numeroDeTexto + 'cincuenta'
  elsif escrito == 6
  numeroDeTexto = numeroDeTexto + 'sesenta'
  elsif escrito == 7
  numeroDeTexto = numeroDeTexto + 'setenta'
  elsif escrito == 8
  numeroDeTexto = numeroDeTexto + 'ochenta'
  elsif escrito == 9
  numeroDeTexto = numeroDeTexto + 'noventa'
  end

  if izquierda &gt; 0
  numeroDeTexto = numeroDeTexto + 'i'
  end
  end

  escrito = izquierda  #  Cuanto falta para el número?
  izquierda  = 0     #  Restar lo que falta.

  if escrito &gt; 0
  if    escrito == 1
  numeroDeTexto = numeroDeTexto + 'uno'
  elsif escrito == 2
  numeroDeTexto = numeroDeTexto + 'dos'
  elsif escrito == 3
  numeroDeTexto = numeroDeTexto + 'tres'
  elsif escrito == 4
  numeroDeTexto = numeroDeTexto + 'cuatro'
  elsif escrito == 5
  numeroDeTexto = numeroDeTexto + 'cinco'
  elsif escrito == 6
  numeroDeTexto = numeroDeTexto + 'seis'
  elsif escrito == 7
  numeroDeTexto = numeroDeTexto + 'siete'
  elsif escrito == 8
  numeroDeTexto = numeroDeTexto + 'ocho'
  elsif escrito == 9
  numeroDeTexto = numeroDeTexto + 'nueve'
  end
  end

  if numeroDeTexto == ''
  #  La unica forma que "numeroDeTexto" este vacio es que
  #  "numero" sea 0.
  return 'cero'
  end

  #  Si numeroDeTexto os hasta hasta aqui es que tenemos un numero
  #  entre 0 y 100, por lo que debemos retornar "numeroDeTexto".
  numeroDeTexto
  end

  puts numeroEnEspanol(  0)
  puts numeroEnEspanol(  9)
  puts numeroEnEspanol( 10)
  puts numeroEnEspanol( 21)
  puts numeroEnEspanol( 17)
  puts numeroEnEspanol( 32)
  puts numeroEnEspanol( 88)
  puts numeroEnEspanol( 99)
  puts numeroEnEspanol(100)
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>cero
  nueve
  diez
  veintiuno
  diecisiete
  treintaidos
  ochentaiocho
  noventainueve
  cien
</code></pre>

<p>Bueno, sin duda hay algunas cosas acerca de este programa que no me gustan. En primer
  lugar hay demasiada repetición. En segundo lugar, no se ocupa de los números mayores de
  100. En tercer lugar, hay muchos casos especiales, demasiados <code>return</code>s. Veamos ahora
  algunas matrices y tratar de limpiar un poco:</p>

<p><em>Código:</em></p>

<pre><code>def numeroEnEspanol numero
  if numero &lt; 0  #  No numeros negativos
  return 'Por favor ingresar un numero que nos ea negativo.'
  end
  if numero == 0
  return 'cero'
  end

  #  No mas casos especiales!  No mas returns!

  numeroDeTexto = ''  #  Esta es el texto que se retornara.

  primeraPosicion = ['uno',     'dos',       'tres',    'cuatro',     'cinco',
  'seis',     'siete',     'ocho',    'nueve']
  segundaPosicion = ['diez',     'veinte',    'treinta',   'cuarenta',    'cincuenta',
  'sesenta',   'setenta',   'ochenta',   'noventa']
  entre11Y19 = ['once',  'doce',    'trece', 'catorce', 'quince',
  'dieciseis', 'diecisiete', 'dieciocho', 'diecinueve']
  entre21Y29 = ['veintiuno',  'veintidos',    'veintitres', 'veinticuatro', 'veinticinco',
  'veintiseis', 'veintisiete', 'veintiiocho', 'veintinueve']

  #  "izquierda" es cuanto del numero aun falta escribir
  #  "escrito" es la parte que estamos escribiendo en este momento.
  #  escrito y izquierda... lo captas?  :)
  izquierda  = numero
  escrito = izquierda/100          #  Cuantos cientos faltan escribir?
  izquierda  = izquierda - escrito*100  #  La esta de estos cientos

  if escrito &gt; 0
  #  Ahora hacemos un pequeño truco:
  cientos  = numeroEnEspanol escrito
  numeroDeTexto = numeroDeTexto + cientos + ' ciento'

  # Eso se llama "recursividad". Entonces, ¿Qué acabo de hacer?
  # Le dije a este método para llamarse a sí mismo, pero con "escrito" en vez de
  # "numero". Recuerde que "escrito" es (por el momento) el número de
  # cientos que tenemos que escribir. Después añadimos "hundred" de "numeroDeTexto",
  # añadimos la cadena 'cien' después de él. Así, por ejemplo, si
  # se llamó originalmente numeroEnEspanol con el 1999 (por lo que "numero" = 1999),
  # y luego en este momento "escrito" sería 19, y la "izquierda" sería 99.
  # La más perezoso que se puede hacer en ese momento es que numeroEnEspanol
  # escriba 'diecinueve' para nosotros, entonces escribimos 'cien',
  # y luego el resto de numeroEnEspanol escribe "noventa y nueve".

  if izquierda &gt; 0
  #  So escribir  'dos ciencincuentaiuno'...
  numeroDeTexto = numeroDeTexto + ' '
  end
  end

  escrito = izquierda/10          #  Cuantas decenas faltan escribir?
  izquierda  = izquierda - escrito*10  #  Resta de estas decenas.

  if escrito &gt; 0
  if ((escrito == 1) and (izquierda &gt; 0))
  #  No podemos escribir "diez-dos" instead of "doce",
  #  hacemos una excepción especial .
  numeroDeTexto = numeroDeTexto + entre11Y19[izquierda-1]
  #  Es "-1" porque entre11Y19[3] ess 'catorce', no 'trece'.

  #  Ya que tomamos el digito que nos faltaba,
  #  no tenemos nada mas que escribir.
  izquierda = 0
  elsif ((escrito ==2 and (izquierda&gt;0)))
  #  Similar para los veintipico
  numeroDeTexto = numeroDeTexto + entre21Y29[izquierda-1]
  izquierda = 0
  else
  numeroDeTexto = numeroDeTexto + segundaPosicion[escrito-1]
  #  Es "-1" porque segundaPosicion[3] es 'cuarenta', no 'treinta'.
  end

  if izquierda &gt; 0
  #  No escribiremos 'sesentacuatro'...
  numeroDeTexto = numeroDeTexto + 'i'
  end
  end

  escrito = izquierda  #  Cuantos faltan?
  izquierda  = 0     #  Restar lo que falta.

  if escrito &gt; 0
  numeroDeTexto = numeroDeTexto + primeraPosicion[escrito-1]
  #  Es "-1" porque primeraPosicion[3] es 'cuatro', no 'tres'.
  end

  #  Ahora solo retornamos "numeroDeTexto"...
  numeroDeTexto
  end

  puts numeroEnEspanol(  0)
  puts numeroEnEspanol(  9)
  puts numeroEnEspanol( 10)
  puts numeroEnEspanol( 11)
  puts numeroEnEspanol( 17)
  puts numeroEnEspanol( 32)
  puts numeroEnEspanol( 88)
  puts numeroEnEspanol( 99)
  puts numeroEnEspanol(100)
  puts numeroEnEspanol(101)
  puts numeroEnEspanol(234)
  puts numeroEnEspanol(3211)
  puts numeroEnEspanol(999999)
  puts numeroEnEspanol(1000000000000)
</code></pre>

<p><em>Resultado:</em></p>

<pre><code>cero
  nueve
  diez
  once
  diecisiete
  treintaidos
  ochentaiocho
  noventainueve
  uno ciento
  uno ciento uno
  dos ciento treintaicuatro
  treintaidos ciento once
  noventainueve ciento noventainueve ciento noventainueve
  uno ciento ciento ciento ciento ciento ciento
</code></pre>

<p><em>Ahhhh ....</em> Eso está mucho, mucho mejor. El programa es bastante denso, por lo
  que puse varios comentarios. También funciona con números grandes ... aunque no
  tan bien como cabría esperar. Por ejemplo, creo que ' un millón de millones ' sería
  un valor de retorno más agradable para que el último número. De hecho, puedes hacer
  eso en este momento ...</p>

<h2>
  <a name="algunas-cosas-por-intentar" class="anchor" href="#algunas-cosas-por-intentar"><span class="mini-icon mini-icon-link"></span></a>Algunas cosas por intentar</h2>

<ul>
  <li><p>Ampliar al <code>numeroEnEspanol</code> . En primer lugar, poner en miles. Por lo tanto, debe devolver <code>un mil</code>
    en lugar de <code>diez cien</code> y <code>diez mil</code> en lugar de <code>cien cien</code> .</p></li>
  <li><p>Ampliar al <code>numeroEnEspanol</code> un poco más. Ahora ponga en millones, para que pueda obtener <code>un millón</code>
    en lugar de <code>un mil mil</code>. A continuación, pruebe a añadir miles de millones y billones.
    ¿Qué tan alto puede llegar?</p></li>
  <li><p>¿Qué hay de <code>tiempoDeMatrimonio</code>? Deberá trabajar casi como <code>numeroEnEspanol</code>, excepto que se
    debe insertar la palabra "y" por todo el lugar, volviendo las cosas como `<code>mil novecientos
    setenta y dos'</code>, o como se supone deben verse en las invitaciones de la boda. Te daría
    más ejemplos, pero yo no lo entiendo completamente. Es posible que necesite ponerse en
    contacto con un coordinador de bodas para que le ayude.</p></li>
  <li><p>Las <em>"Noventa y nueve botellas de cerveza ..."</em> Usando numeroEnEspanol y el viejo programa,
    escribir las letras de esta canción en forma <em>correcta</em> esta vez.
    Penalizar a tu computador: hacer que se inicie en 9999. (No elegir un número demasiado
    grande, ya que al escribir todo eso en la pantalla de tu computador toma un buen tiempo. Cien
    mil botellas de cerveza lleva tiempo;. Y si tienes que elegir un millón, te estarás
    castigando tú mismo!</p></li>
</ul><p>¡Felicitaciones! En este punto, usted es un ¡programador de verdad! Usted ha aprendido
  todo lo que necesita para construir grandes programas desde cero. Si tienes ideas
  para los programas que te gustaría escribir para ti mismo, ¡dame una!</p>

<p>Por supuesto, construir todo desde cero puede ser un proceso bastante lento. ¿Por
  qué gastar tiempo escribiendo código que alguien más ya ha escrito? ¿Quieres
  que tu programa envie un correo electrónico? ¿Te gustaría guardar y cargar archivos
  en tu computadora? ¿Qué hay de la generación de páginas web para ver un tutorial en
  donde los ejemplos de código son automáticamente ejecutados? ;) Ruby tiene muchos
  <%=  link_to "tipos de objetos", :controller => :tutorial, :action => :clases %>.</a>
  que podemos utilizar para ayudarnos a escribir mejores programas y con mayor rapidez.</p></article>
</div>
<br><br><br><br><br><br><br><br>
